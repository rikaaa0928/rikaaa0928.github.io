<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Banbanzai</title>
    <link>/</link>
    <description>Recent content on Banbanzai</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 05 Aug 2020 13:32:27 +0800</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>github action create go release</title>
      <link>/posts/github_action/</link>
      <pubDate>Wed, 05 Aug 2020 13:32:27 +0800</pubDate>
      
      <guid>/posts/github_action/</guid>
      <description># This is a basic workflow to help you get started with Actions name: CI # Controls when the action will run. Triggers the workflow on push or pull request # events but only for the master branch on: push: # Sequence of patterns matched against refs/tags tags: - &amp;#39;v*&amp;#39; # Push events to matching v*, i.e. v1.0, v20.15.10 # A workflow run is made up of one or more jobs that can run sequentially or in parallel jobs: releases-matrix: name: Release Go Binary runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v2 - uses: actions/setup-go@v2 - name: Build project # This would actually build your project, using zip for an example artifact run: go mod tidy &amp;amp;&amp;amp; .</description>
    </item>
    
    <item>
      <title>vbs and cmd</title>
      <link>/posts/vbs_workpath/</link>
      <pubDate>Mon, 27 Jul 2020 10:52:20 +0800</pubDate>
      
      <guid>/posts/vbs_workpath/</guid>
      <description>Set ws = CreateObject(&amp;#34;Wscript.Shell&amp;#34;) Dim path path = &amp;#34;path with space is ok&amp;#34; ws.CurrentDirectory = path Dim cmd cmd = &amp;#34;cmd /c a.exe -p &amp;gt; output.txt 2&amp;gt;&amp;amp;1&amp;#34; r = ws.Run(cmd,0,false) REM Wscript.Echo r cmd /k 执行后保持 cmd /c 执行后关闭</description>
    </item>
    
    <item>
      <title>zypper multi version manage</title>
      <link>/posts/zypper_multi_version/</link>
      <pubDate>Tue, 03 Mar 2020 11:37:53 +0800</pubDate>
      
      <guid>/posts/zypper_multi_version/</guid>
      <description>zypper se -si &amp;#39;kernel*&amp;#39; -s detail -i installed only
zypper rm PACKAGENAME-VERSION </description>
    </item>
    
    <item>
      <title>vbs service</title>
      <link>/posts/vbs_service/</link>
      <pubDate>Wed, 19 Feb 2020 09:58:24 +0800</pubDate>
      
      <guid>/posts/vbs_service/</guid>
      <description>start
Set ws = CreateObject(&amp;#34;Wscript.Shell&amp;#34;) Dim cmd,arg1,arg2 cmd = &amp;#34;&amp;#34;&amp;#34;path to/*.exe&amp;#34;&amp;#34;&amp;#34; arg1 = &amp;#34; -k &amp;#34; arg2 = &amp;#34;&amp;#34;&amp;#34;path to/v&amp;#34;&amp;#34;&amp;#34; ws.Run cmd &amp;amp; arg1 &amp;amp; arg2,0,true stop
Set ws = CreateObject(&amp;#34;Wscript.Shell&amp;#34;) ws.Run &amp;#34;taskkill /im *.exe&amp;#34;,0,true </description>
    </item>
    
    <item>
      <title>cloudflare cdn data center</title>
      <link>/posts/cloudflare_cdn_data_center/</link>
      <pubDate>Sun, 09 Feb 2020 18:19:36 +0800</pubDate>
      
      <guid>/posts/cloudflare_cdn_data_center/</guid>
      <description>162.158.26.1
172.68.144.1
172.69.152.1
104.19.195.151
104.18.177.69
104.25.176.1
104.19.195.151 美国 CloudFlare公司CDN节点(移动快)(using)
104.18.177.69 美国 CloudFlare公司CDN节点(移动快)
AS13335
104.25.176.0/20 美国 CloudFlare公司CDN节点(移动快)
104.16.0.0/20 美国 CloudFlare公司CDN节点(移动快)
可以设置用于 移动网络
108.162.227.1
162.158.4.1
172.69.152.1
104.20.157.155 美国 CloudFlare公司CDN节点（联通快）
104.20.66.66 美国 CloudFlare公司CDN节点（联通快）
可以设置用于 联通网络
162.158.116.1
108.162.226.1
可以设置用于 默认网络
172.68.32.1
108.162.243.1
108.162.245.1
108.162.246.1
172.68.172.1
104.25.183.205 美国 CloudFlare公司CDN节点(电信快</description>
    </item>
    
    <item>
      <title>wsl service and more</title>
      <link>/posts/wsl_service/</link>
      <pubDate>Mon, 27 Jan 2020 18:50:15 +0800</pubDate>
      
      <guid>/posts/wsl_service/</guid>
      <description>nohup command &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
&amp;gt;表示1&amp;gt;，重定向标准输出，2&amp;gt;重定向标准错误，&amp;amp;1指重定向至标准输出
wsl中的script，可以在windows中使用wsl -d {wsl名称} -u {username} -e {command}执行
可以使用vbs屏蔽弹出的shell/cmd窗口:
Set ws = CreateObject(&amp;#34;Wscript.Shell&amp;#34;) ws.run &amp;#34;wsl -d {wsl名称} -u {username} -e {command}&amp;#34;, vbhide visudo 中添加 {username} ALL=(root) NOPASSWD: {path_to_script} 可以解决sudo执行密码的问题</description>
    </item>
    
    <item>
      <title>vscode golang</title>
      <link>/posts/vscode_golang/</link>
      <pubDate>Sun, 26 Jan 2020 00:03:34 +0800</pubDate>
      
      <guid>/posts/vscode_golang/</guid>
      <description>{ &amp;quot;go.formatTool&amp;quot;: &amp;quot;goimports&amp;quot;, &amp;quot;go.testFlags&amp;quot;: [ &amp;quot;-v&amp;quot; ] }</description>
    </item>
    
    <item>
      <title>systemd service</title>
      <link>/posts/systemd_service/</link>
      <pubDate>Sun, 05 Jan 2020 11:52:36 +0800</pubDate>
      
      <guid>/posts/systemd_service/</guid>
      <description>[Unit]
Description=desc
After=syslog.target network.target network-online.target
Wants=network-online.target systemd-networkd-wait-online.service network.target
[Service] Restart=on-failure
User=users
ExecStart=exec
Environment=CADDYPATH=/opt/caddy_path
ExecReload=/bin/kill $MAINPID
KillMode=mixed
KillSignal=SIGTERM
TimeoutStopSec=5s
; Limit the number of file descriptors; see man systemd.exec for more limit settings.
;LimitNOFILE=8192
; Unmodified caddy is not expected to use more than that.
;LimitNPROC=512
;MemoryMax=512M
;MemorySwapMax=256M
;MemoryHigh=400M
; Use private /tmp and /var/tmp, which are discarded after caddy stops. PrivateTmp=true
; Use a minimal /dev (May bring additional security if switched to &amp;lsquo;true&amp;rsquo;, but it may not work on Raspberry Pi&#39;s or other devices, so it has been disabled in this dist.</description>
    </item>
    
    <item>
      <title>systemd mount sshfs</title>
      <link>/posts/systemd_mount/</link>
      <pubDate>Sun, 05 Jan 2020 11:47:34 +0800</pubDate>
      
      <guid>/posts/systemd_mount/</guid>
      <description>[Unit]
Description=sshfs
After=network-online.target network.target
Wants=network-online.target systemd-networkd-wait-online.service network.target
[Install]
WantedBy=multi-user.target
[Mount]
What=user@ip:path
Where=path
Type=fuse.sshfs
Options=_netdev,x-systemd.automount,reconnect,idmap=user,allow_other
TimeoutSec=60</description>
    </item>
    
    <item>
      <title>Redis第七周</title>
      <link>/posts/redis_7/</link>
      <pubDate>Wed, 18 Dec 2019 15:06:24 +0800</pubDate>
      
      <guid>/posts/redis_7/</guid>
      <description>Redis 基础结构 dict时redis中的字典结构，包含两个dictht（hash table哈希表）
typedef struct dict { dictType *type; //type中定义了对于Hash表的操作函数，比如Hash函数，key比较函数等 void *privdata; //privdata是可以传递给dict的私有数据 dictht ht[2]; //每一个dict都包含两个dictht，一个用于rehash int rehashidx; //表示此时是否在进行rehash操作 int iterators; //迭代器 } dict; 哈希表
typedef struct dictht { dictEntry **table; //数组指针，每个元素都是一个指向dictEntry的指针 unsigned long size; //表示这个dictht已经分配空间的大小，大小总是2^n unsigned long sizemask; //sizemask = size - 1; 是用来求hash值的掩码，为2^n-1 unsigned long used; //目前已有的元素数量 } dictht; hashtable中存储k-v结构的链表结构
typedef struct dictEntry { void *key; //key void*表示任意类型指针 union { //联合体中对于数字类型提供了专门的类型优化 void *val; uint64_t u64; int64_t s64; } v; struct dictEntry *next; //next指针 } dictEntry; redisObject储存key和value</description>
    </item>
    
    <item>
      <title>Howto: Hugo</title>
      <link>/posts/howto_hugo/</link>
      <pubDate>Sat, 14 Dec 2019 19:34:57 +0800</pubDate>
      
      <guid>/posts/howto_hugo/</guid>
      <description>hugo new dict/uri.md
更新日期 lastmod=*** \\主题原因不生效？
hugo markdown不支持~~delete~~，可以使用&amp;lt;del&amp;gt;delete&amp;lt;/del&amp;gt;
delete
需要添加配置
[markup.goldmark.renderer] unsafe= true </description>
    </item>
    
    <item>
      <title>Redis第六周</title>
      <link>/posts/redis_6/</link>
      <pubDate>Sat, 14 Dec 2019 19:17:37 +0800</pubDate>
      
      <guid>/posts/redis_6/</guid>
      <description> 先更db再更/删redis  Redis操作失败，没有重试或重试较慢   先删redis再更db  缓存未命中(redis被删),请求更新缓存的命令与更新db的命令串行化(队列),更新缓存一定在更新db之后,更新缓存后再读取 连续多个缓存未命中,队列中更新db之后已经存在一个更新缓存,不需要新的更新缓存命令    </description>
    </item>
    
    <item>
      <title>Linux rename</title>
      <link>/posts/linux_rename/</link>
      <pubDate>Sat, 14 Dec 2019 15:25:31 +0800</pubDate>
      
      <guid>/posts/linux_rename/</guid>
      <description>rename ’s/被替换的/替换的/’ 文件通配</description>
    </item>
    
    <item>
      <title>Redis第五周</title>
      <link>/posts/redis_5/</link>
      <pubDate>Sat, 14 Dec 2019 15:25:21 +0800</pubDate>
      
      <guid>/posts/redis_5/</guid>
      <description>redis乐观锁 == CAS乐观锁     watch a c = get(a) c = a   &amp;hellip;&amp;hellip; &amp;hellip;&amp;hellip; &amp;hellip;&amp;hellip;   multi func(){...} exec CAD(a,c,func) CAS(a,c,b)    数据结构:
{ key:{ … : …, ki : vi } } { ...:... key+ki : vi } redis的key可以设置超时，可以有自动清理的效果；使用hash的话需要手动写清理任务
hash的key可以通过hkeys遍历，性能较高；使用redis key的话也可以使用keys命令+正则表达式遍历，但在生产环境中ban
数据存储
储存容易处理的中间结果，读取计算最终结果
装饰器
使用装饰器完成/创建基于单例的任务
python装饰器
定义：def dec(func):
使用：@dec
定义：def createDec(name): return decFunc
使用：@createDec(name)</description>
    </item>
    
    <item>
      <title>go env</title>
      <link>/posts/go_env/</link>
      <pubDate>Sat, 14 Dec 2019 15:25:15 +0800</pubDate>
      
      <guid>/posts/go_env/</guid>
      <description>go env 查看所有相关环境
go env -w 设置默认值
go env -u unset
GOSUMDB 默认：sum.golang.org，mod模式下校验包 GONOSUMDB url下忽略mod模式下的校验
GOPROXY gomod代理
GONOPROXY 为url取消代理
GOPRIVATE：GONOSUMDB+GONOPROXY</description>
    </item>
    
    <item>
      <title>Redis第四周</title>
      <link>/posts/redis_4/</link>
      <pubDate>Sat, 14 Dec 2019 15:25:06 +0800</pubDate>
      
      <guid>/posts/redis_4/</guid>
      <description>快照持久化 保存成本高，不易高频保存，崩溃后会丢失保存之后的所有更改
可以将处理进度保存，崩溃后读取状体继续处理
bgsave创建子进程，不影响主进程工作但工作量大效率低，可以考虑在空闲时间使用save命令，停止工作，快速保存快照
AOF持久化 直接将命令保存至文件，可以逐条保存或每秒保存
文件体积大，可以使用bgrewriteaof重写压缩，合理控制压缩频率
复制/主从集群 从服务器唯一必须设置主服务器地址
主服务器先bgsave，期间用缓冲区记录命令；将快照发给从服务器后，再发送缓冲区记录的命令和新命令
从服务器接收到主服务器快照后，会删除自身所有数据
主从链，读请求很多，从服务器很多，更新不过来。使用中间层分担；树状
向主服务器写入数据后，再写入唯一虚构值，通过从服务器是否存在虚构值判断数据是否写入从服务器
info命令可以看出是否已经把所有数据写到硬盘（aof）
复制+aof抵御系统崩溃
处理故障 可以检查快照和aof，删除不正确命令及之后的命令，无法修复
主服务器a崩溃后，从服务器b快照发给c，c作为新主服务器，或b升级为主服务器，其他服务器从b恢复
redis的二阶提交 使用watch实现类cas操作，悲观锁的方法
先watch，验证数据，不通过则unwatch，通过则开启事务执行操作
非事务流水线 命令之间结果不会影响输入，可以使用非事务流水线避免逐条提交的通信和执行延迟
性能优化 连接重用&amp;amp;流水线批量处理
redis-benchmark
其它 有序集合score相等时按成员名称排序
用于日志和计数
keys支持正则匹配，操作消耗极大</description>
    </item>
    
    <item>
      <title>Redis第三周</title>
      <link>/posts/redis_3/</link>
      <pubDate>Sat, 14 Dec 2019 15:24:57 +0800</pubDate>
      
      <guid>/posts/redis_3/</guid>
      <description>set/zset支持计算交集并集差集，返回结果或转存结果至新set/zset
简单的发布与订阅功能，不处理网络连接问题
sort命令，更灵活的排序功能
事务：命令放到队列中，exec后执行，不会被打断
key设置过期时间</description>
    </item>
    
    <item>
      <title>Golang json.Marshal</title>
      <link>/posts/go_json_marshal/</link>
      <pubDate>Sat, 14 Dec 2019 15:23:29 +0800</pubDate>
      
      <guid>/posts/go_json_marshal/</guid>
      <description>会对key进行排序</description>
    </item>
    
    <item>
      <title>Redis第二周</title>
      <link>/posts/redis_2/</link>
      <pubDate>Sat, 14 Dec 2019 15:20:42 +0800</pubDate>
      
      <guid>/posts/redis_2/</guid>
      <description>使用有序集合维护限制缓存数量
使用集合储存购物车、id-token对
缓存面积过大消耗也会过大，选择性缓存
redis字符串自动识别数字，整型或浮点，可以进行位操作</description>
    </item>
    
    <item>
      <title>MySQL auto-rehash</title>
      <link>/posts/mysql_auto_rehash/</link>
      <pubDate>Sat, 14 Dec 2019 14:59:31 +0800</pubDate>
      
      <guid>/posts/mysql_auto_rehash/</guid>
      <description>使用mysql登录到数据库查看表结构时遇到问题，在use $databaseName;之后，执行desc $tableName; show tables;等命令时会出现ERROR 2006 (HY000): MySQL server has gone away的错误
Fix：经检查，发现应该是mysql中的默认参数--auto-rehash，启用自动补全命令功能的参数，会在use $databaseName;之后预读数据库中的数据，生成自动补全使用的信息。在数据库较大时，会消耗较多的时间和性能。启动mysql-client时，使用-A或 --no-auto-rehash参数，或在配置中添加disable-auto-rehash禁用功能即可恢复正常。</description>
    </item>
    
    <item>
      <title>Redis第一周</title>
      <link>/posts/redis_1/</link>
      <pubDate>Sat, 14 Dec 2019 14:53:43 +0800</pubDate>
      
      <guid>/posts/redis_1/</guid>
      <description>远程内存数据库,NoSQL
key-valve(5种) map
安装：建议编译源码安装
编译依赖：gcc,make,python-dev
wget-&amp;gt;tar-&amp;gt;make-&amp;gt;sudo make install
作用：主存储&amp;amp;二级存储皆可
特点：字符串，列表，集合，散列，有序集合五种类型，专属命令，批量操作，不完全事务支持，发布与订阅，主从复制，持久化，脚本
持久化策略：时间点转储&amp;amp;append-only文件+设置不同步、每秒同步、每次写同步
list为双向列表，头尾append，pop，trim，get，find，delete
zinterstore,求a set/zset中的数据与b zset的交集（sum,min,max）为新的zset</description>
    </item>
    
    <item>
      <title></title>
      <link>/external/</link>
      <pubDate>Sat, 14 Dec 2019 14:49:36 +0800</pubDate>
      
      <guid>/external/</guid>
      <description>贴吧签到</description>
    </item>
    
    <item>
      <title>Using jQuery in electron app with require</title>
      <link>/posts/jquery_in_electron_require/</link>
      <pubDate>Fri, 13 Dec 2019 21:49:46 +0800</pubDate>
      
      <guid>/posts/jquery_in_electron_require/</guid>
      <description>&amp;lt;script&amp;gt;window.$ = window.jQuery = require(‘jquery’);&amp;lt;/script&amp;gt;</description>
    </item>
    
    <item>
      <title>Windows Temporary IPv6 addresse</title>
      <link>/posts/windows_temporary_ipv6_addr/</link>
      <pubDate>Fri, 13 Dec 2019 21:49:14 +0800</pubDate>
      
      <guid>/posts/windows_temporary_ipv6_addr/</guid>
      <description>Check:
netsh interface ipv6 show privacy
netsh interface ipv6 set global randomizeidentifiers=disabled
netsh interface ipv6 set privacy state=disabled</description>
    </item>
    
    <item>
      <title>electron-builder portable env</title>
      <link>/posts/electron_builder_portable_env/</link>
      <pubDate>Fri, 13 Dec 2019 21:48:52 +0800</pubDate>
      
      <guid>/posts/electron_builder_portable_env/</guid>
      <description>process.env.PORTABLE_EXECUTABLE_DIR : full path without file name
process.env.PORTABLE_EXECUTABLE_APP_FILENAME : file name in package.json
process.env.PORTABLE_EXECUTABLE_FILE : full path with file name</description>
    </item>
    
    <item>
      <title>Firewalld IP Masquerade</title>
      <link>/posts/firewalld_ip_masquerade/</link>
      <pubDate>Fri, 13 Dec 2019 21:48:32 +0800</pubDate>
      
      <guid>/posts/firewalld_ip_masquerade/</guid>
      <description>firewalld
绑定网卡和zone： nmcli c mod eth0 connection.zone internal
两边全部 add-masquerade ： firewall-cmd –zone=external –add-masquerade –permanent
端口映射：firewall-cmd –zone=external –add-forward-port=port=22:proto=tcp:toport=22:toaddr=192.168.0.31
路由转发：
firewall-cmd –direct –add-rule ipv4 nat POSTROUTING 0 -o eth1 -j MASQUERADE firewall-cmd –direct –add-rule ipv4 filter FORWARD 0 -i eth0 -o eth1 -j ACCEPT firewall-cmd –direct –add-rule ipv4 filter FORWARD 0 -i eth1 -o eth0 -m state –state RELATED,ESTABLISHED -j ACCEPT </description>
    </item>
    
    <item>
      <title>Manjaro kernel management</title>
      <link>/posts/manjaro_kernel/</link>
      <pubDate>Fri, 13 Dec 2019 21:48:06 +0800</pubDate>
      
      <guid>/posts/manjaro_kernel/</guid>
      <description>mhwd-kernel -li sudo mhwd-kernel -i linux313 sudo mhwd-kernel -i linux313 rmc //替换当前内核 sudo mhwd-kernel -r linux39 sudo pacman -R linux39-headers sudo pacman -R linux39-extramodules sudo pacman -R linux39 linux39-headers linux39-extramodules </description>
    </item>
    
    <item>
      <title>Manjaro N&#43;I双显卡 闭源驱动&amp;Bumblebee</title>
      <link>/posts/manjaro_nvidia_and_intel/</link>
      <pubDate>Fri, 13 Dec 2019 21:47:46 +0800</pubDate>
      
      <guid>/posts/manjaro_nvidia_and_intel/</guid>
      <description>安装驱动：
sudo pacman -S virtualgl lib32-virtualgl lib32-primus primus sudo mhwd -f -i pci video-hybrid-intel-nvidia-bumblebee sudo systemctl enable bumblebeed 查看驱动: mhwd -li
nvidia-setting: optirun -b none nvidia-settings -c :8</description>
    </item>
    
    <item>
      <title>Howto: md</title>
      <link>/posts/how_to_md/</link>
      <pubDate>Fri, 13 Dec 2019 21:20:09 +0800</pubDate>
      
      <guid>/posts/how_to_md/</guid>
      <description>* 无序列表
 1 2  1. 列表嵌套
- 四个空格
* 四个空格
2. 列表2
 列表嵌套  四个空格  四个空格     列表2  **加粗** 或 __a__ : 加粗 a
*斜体* 或 _斜体_ : 斜体
*__加粗斜体__* : 加粗斜体
&amp;amp;ensp; &amp;amp;emsp; &amp;amp;nbsp; : 中，大，小空格
1. 有序
2. 列表
 有序 列表  ~~delete~~:~~delete~~
&amp;lt;del&amp;gt;delete&amp;lt;/del&amp;gt;:delete
# 标题
标题 表格 c1|c2|c3
-|-|-
a|b|c
A|B|C
   c1 c2 c3     a b c   A B C    `code` : code</description>
    </item>
    
    <item>
      <title>Linux ipv6 forwarding</title>
      <link>/posts/linux_ipv6_forwarding/</link>
      <pubDate>Fri, 13 Dec 2019 21:06:20 +0800</pubDate>
      
      <guid>/posts/linux_ipv6_forwarding/</guid>
      <description>net.ipv6.conf.all.forwarding = 1
net.ipv6.conf.all. accept_ra = 2
accept_ra
Type: BOOLEAN
Accept Router Advertisements; autoconfigure using them.
Possible values are:
 0: Do not accept Router Advertisements. 1: Accept Router Advertisements if forwarding is disabled. 2: Overrule forwarding behaviour. Accept Router Advertisements even if forwarding is enabled.  </description>
    </item>
    
  </channel>
</rss>