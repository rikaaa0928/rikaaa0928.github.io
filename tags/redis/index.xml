<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>redis on Banbanzai</title>
    <link>/tags/redis/</link>
    <description>Recent content in redis on Banbanzai</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 14 Dec 2019 19:17:37 +0800</lastBuildDate>
    
	<atom:link href="/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis第六周</title>
      <link>/posts/redis_6/</link>
      <pubDate>Sat, 14 Dec 2019 19:17:37 +0800</pubDate>
      
      <guid>/posts/redis_6/</guid>
      <description> 先更db再更/删redis  Redis操作失败，没有重试或重试较慢   先删redis再更db  缓存未命中(redis被删),请求更新缓存的命令与更新db的命令串行化(队列),更新缓存一定在更新db之后,更新缓存后再读取 连续多个缓存未命中,队列中更新db之后已经存在一个更新缓存,不需要新的更新缓存命令    </description>
    </item>
    
    <item>
      <title>Redis第五周</title>
      <link>/posts/redis_5/</link>
      <pubDate>Sat, 14 Dec 2019 15:25:21 +0800</pubDate>
      
      <guid>/posts/redis_5/</guid>
      <description>redis乐观锁 == CAS乐观锁     watch a c = get(a) c = a   &amp;hellip;&amp;hellip; &amp;hellip;&amp;hellip; &amp;hellip;&amp;hellip;   multi func(){...} exec CAD(a,c,func) CAS(a,c,b)    数据结构:
{ key:{ … : …, ki : vi } } { ...:... key+ki : vi } redis的key可以设置超时，可以有自动清理的效果；使用hash的话需要手动写清理任务
hash的key可以通过hkeys遍历，性能较高；使用redis key的话也可以使用keys命令+正则表达式遍历，但在生产环境中ban
数据存储
储存容易处理的中间结果，读取计算最终结果
装饰器
使用装饰器完成/创建基于单例的任务
python装饰器
定义：def dec(func):
使用：@dec
定义：def createDec(name): return decFunc
使用：@createDec(name)</description>
    </item>
    
    <item>
      <title>Redis第四周</title>
      <link>/posts/redis_4/</link>
      <pubDate>Sat, 14 Dec 2019 15:25:06 +0800</pubDate>
      
      <guid>/posts/redis_4/</guid>
      <description>快照持久化 保存成本高，不易高频保存，崩溃后会丢失保存之后的所有更改
可以将处理进度保存，崩溃后读取状体继续处理
bgsave创建子进程，不影响主进程工作但工作量大效率低，可以考虑在空闲时间使用save命令，停止工作，快速保存快照
AOF持久化 直接将命令保存至文件，可以逐条保存或每秒保存
文件体积大，可以使用bgrewriteaof重写压缩，合理控制压缩频率
复制/主从集群 从服务器唯一必须设置主服务器地址
主服务器先bgsave，期间用缓冲区记录命令；将快照发给从服务器后，再发送缓冲区记录的命令和新命令
从服务器接收到主服务器快照后，会删除自身所有数据
主从链，读请求很多，从服务器很多，更新不过来。使用中间层分担；树状
向主服务器写入数据后，再写入唯一虚构值，通过从服务器是否存在虚构值判断数据是否写入从服务器
info命令可以看出是否已经把所有数据写到硬盘（aof）
复制+aof抵御系统崩溃
处理故障 可以检查快照和aof，删除不正确命令及之后的命令，无法修复
主服务器a崩溃后，从服务器b快照发给c，c作为新主服务器，或b升级为主服务器，其他服务器从b恢复
redis的二阶提交 使用watch实现类cas操作，悲观锁的方法
先watch，验证数据，不通过则unwatch，通过则开启事务执行操作
非事务流水线 命令之间结果不会影响输入，可以使用非事务流水线避免逐条提交的通信和执行延迟
性能优化 连接重用&amp;amp;流水线批量处理
redis-benchmark
其它 有序集合score相等时按成员名称排序
用于日志和计数
keys支持正则匹配，操作消耗极大</description>
    </item>
    
    <item>
      <title>Redis第三周</title>
      <link>/posts/redis_3/</link>
      <pubDate>Sat, 14 Dec 2019 15:24:57 +0800</pubDate>
      
      <guid>/posts/redis_3/</guid>
      <description>set/zset支持计算交集并集差集，返回结果或转存结果至新set/zset
简单的发布与订阅功能，不处理网络连接问题
sort命令，更灵活的排序功能
事务：命令放到队列中，exec后执行，不会被打断
key设置过期时间</description>
    </item>
    
    <item>
      <title>Redis第二周</title>
      <link>/posts/redis_2/</link>
      <pubDate>Sat, 14 Dec 2019 15:20:42 +0800</pubDate>
      
      <guid>/posts/redis_2/</guid>
      <description>使用有序集合维护限制缓存数量
使用集合储存购物车、id-token对
缓存面积过大消耗也会过大，选择性缓存
redis字符串自动识别数字，整型或浮点，可以进行位操作</description>
    </item>
    
    <item>
      <title>Redis第一周</title>
      <link>/posts/redis_1/</link>
      <pubDate>Sat, 14 Dec 2019 14:53:43 +0800</pubDate>
      
      <guid>/posts/redis_1/</guid>
      <description>远程内存数据库,NoSQL
key-valve(5种) map
安装：建议编译源码安装
编译依赖：gcc,make,python-dev
wget-&amp;gt;tar-&amp;gt;make-&amp;gt;sudo make install
作用：主存储&amp;amp;二级存储皆可
特点：字符串，列表，集合，散列，有序集合五种类型，专属命令，批量操作，不完全事务支持，发布与订阅，主从复制，持久化，脚本
持久化策略：时间点转储&amp;amp;append-only文件+设置不同步、每秒同步、每次写同步
list为双向列表，头尾append，pop，trim，get，find，delete
zinterstore,求a set/zset中的数据与b zset的交集（sum,min,max）为新的zset</description>
    </item>
    
  </channel>
</rss>