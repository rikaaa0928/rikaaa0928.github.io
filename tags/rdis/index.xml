<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rdis on Banbanzai</title>
    <link>/tags/rdis/</link>
    <description>Recent content in rdis on Banbanzai</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 18 Dec 2019 15:06:24 +0800</lastBuildDate>
    
	<atom:link href="/tags/rdis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis第七周</title>
      <link>/posts/redis_7/</link>
      <pubDate>Wed, 18 Dec 2019 15:06:24 +0800</pubDate>
      
      <guid>/posts/redis_7/</guid>
      <description>Redis 基础结构 dict时redis中的字典结构，包含两个dictht（hash table哈希表）
typedef struct dict { dictType *type; //type中定义了对于Hash表的操作函数，比如Hash函数，key比较函数等 void *privdata; //privdata是可以传递给dict的私有数据 dictht ht[2]; //每一个dict都包含两个dictht，一个用于rehash int rehashidx; //表示此时是否在进行rehash操作 int iterators; //迭代器 } dict; 哈希表
typedef struct dictht { dictEntry **table; //数组指针，每个元素都是一个指向dictEntry的指针 unsigned long size; //表示这个dictht已经分配空间的大小，大小总是2^n unsigned long sizemask; //sizemask = size - 1; 是用来求hash值的掩码，为2^n-1 unsigned long used; //目前已有的元素数量 } dictht; hashtable中存储k-v结构的链表结构
typedef struct dictEntry { void *key; //key void*表示任意类型指针 union { //联合体中对于数字类型提供了专门的类型优化 void *val; uint64_t u64; int64_t s64; } v; struct dictEntry *next; //next指针 } dictEntry; redisObject储存key和value</description>
    </item>
    
  </channel>
</rss>